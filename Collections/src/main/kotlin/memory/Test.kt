package memory

import collections.MyLinkedList

fun main() {
    /* переменная var user храниться в стеке (по умолчанию стек = 1 мб)
        но созданный объект User("John") храниться в куче
        при присваивании переменной значения объекта, в переменную кладется адрес объекта в куче
    */
    var user = User("John")
    var user2 = User("Max")
    user = user2 // только изменились ссылки в стеке, обе переменные теперь хранят адрес одного объекта в куче
    // теперь добраться до объекта User("John") из стека нельзя, и его удалит сборщик мусора!

    // однако все что относится к экземплярам какого-то класса храниться в куче! (например, MyLinkedList)
    var list = MyLinkedList<User>().apply {
        repeat(3) {
            add(User("$it"))
        }
    }
    list = MyLinkedList() // В данном случае, сборщик мусора удалит объекты, т.к. Нет ссылки из стека

    val a: Int = 5 // в байт-коде будет int (с маленькой буквы, примитивный тип) - объект в куче не создается, сразу храниться в стеке
    val b: Int? = 10 // в байт-коде будет Integer (обертка, ссылочный тип) - объект в куче, ссылка в стеке!

    // в Kotlin все типы ссылочные, но везде где возможно компилятор заменит на примитивный тип
    // (byte, short, int, long, float, double, char, boolean)
}

data class User(val name: String)