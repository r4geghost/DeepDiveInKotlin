package homework

/*
    –ù–∞—à —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –í–∞—Å—è –ü—É–ø–∫–∏–Ω (–∫–æ—Ç–æ—Ä—ã–π —è–≤–Ω–æ –ø—Ä–æ–≥—É–ª–∏–≤–∞–ª –∫—É—Ä—Å –ø–æ Kotlin üôÉ) –Ω–∞–ø–∏—Å–∞–ª –∫—Ä–∞–π–Ω–µ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≥—Ä–∞–º–æ—Ç–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–Ω —Å–¥–µ–ª–∞–ª —Ç–∞–∫, —á—Ç–æ –∫–ª–∞—Å—Å—ã
    UserMonitor, OrderMonitor –∏ PriceMonitor –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–ª–±—è—Ç –±–µ–¥–Ω—ã–π DataRepository, –ø—Ä–æ–≤–µ—Ä—è—è, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ.

    üö® –ß—Ç–æ –≤ –∏—Ç–æ–≥–µ?
    ‚ùå –õ–∏—à–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É, –≤–µ–¥—å –∫–æ–¥ –∫—Ä—É—Ç–∏—Ç—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–∞—Ö.
    ‚ùå –ü–ª–æ—Ö–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ = –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤.
    ‚ùå –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—á—É—Ç, —á–∏—Ç–∞—è —ç—Ç–æ—Ç –∫–æ–¥.
    –í–∞—à–∞ –º–∏—Å—Å–∏—è:

    –°–ø–∞—Å—Ç–∏ –∫–æ–¥ –æ—Ç –±–µ–∑—É–º–∏—è –í–∞—Å–∏ –ü—É–ø–∫–∏–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å" (Observer).
    –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:

    ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π DataRepository –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (MutableObservable).
    ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä—ã (UserMonitor, OrderMonitor, PriceMonitor) –¥–æ–ª–∂–Ω—ã —É–π—Ç–∏ –≤ —É—Ç–∏–ª—å.
    ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ (Observer) –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ main() - –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ü–∏–∫–ª–æ–≤!
 */

import kotlin.concurrent.thread
import kotlin.math.round
import kotlin.random.Random

// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö
object DataRepository {
    var userData: String = "User_Initial"
    var orderData: Int = 100
    var priceData: Double = 99.99

    // –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    fun updateData(newUser: String? = null, newOrder: Int? = null, newPrice: Double? = null) {
        newUser?.let { userData = it }
        newOrder?.let { orderData = it }
        newPrice?.let { priceData = round(it * 100) / 100 }
    }
}


// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–æ—Å–æ–º
class UserMonitor(private val repository: DataRepository) {
    init {
        thread {
            var lastValue = repository.userData
            while (true) {
                println("UserMonitor: –∑–∞–ø—Ä–æ—Å –∫ DataRepository")
                if (repository.userData != lastValue) {
                    println("UserMonitor: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${repository.userData}")
                    lastValue = repository.userData
                }
                Thread.sleep(1000)
            }
        }
    }
}

class OrderMonitor(private val repository: DataRepository) {
    init {
        thread {
            var lastValue = repository.orderData
            while (true) {
                println("OrderMonitor: –∑–∞–ø—Ä–æ—Å –∫ DataRepository")
                if (repository.orderData != lastValue) {
                    println("OrderMonitor: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: ${repository.orderData}")
                    lastValue = repository.orderData
                }
                Thread.sleep(1000)
            }
        }
    }
}

class PriceMonitor(private val repository: DataRepository) {
    init {
        thread {
            var lastValue = repository.priceData
            while (true) {
                println("PriceMonitor: –∑–∞–ø—Ä–æ—Å –∫ DataRepository")
                if (repository.priceData != lastValue) {
                    println("PriceMonitor: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${repository.priceData}")
                    lastValue = repository.priceData
                }
                Thread.sleep(1000)
            }
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class DataUpdater(private val repository: DataRepository) {
    init {
        thread {
            while (true) {
                when (Random.nextInt(3)) {
                    0 -> repository.updateData(newUser = "User_${Random.nextInt(1, 100)}")
                    1 -> repository.updateData(newOrder = Random.nextInt(100, 200))
                    2 -> repository.updateData(newPrice = Random.nextDouble(50.0, 150.0))
                }
                val millis = Random.nextLong(10000L)
                Thread.sleep(millis) // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            }
        }
    }
}



fun main() {
    // –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    DataUpdater(DataRepository)

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    UserMonitor(DataRepository)
    OrderMonitor(DataRepository)
    PriceMonitor(DataRepository)
}